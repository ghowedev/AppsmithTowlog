{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "2",
  "bottomRow": 72,
  "boxShadow": "none",
  "defaultModel": "{{\n  {\n...reacttable.model.selectedRow,\n    towReasons: getTowReasons.data,\n    towCompanies: getTowCompaniesPolice.data\n  }\n}}\n",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "cjsya0lnw8",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 36,
  "mobileLeftColumn": 4,
  "mobileRightColumn": 27,
  "mobileTopRow": 6,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 72,
  "originalTopRow": 4,
  "parentColumnSpace": 19.8125,
  "parentId": "dcb99bypq2",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  padding: 29px 25px;\n  box-sizing: border-box;\n  font-family: system-ui;\n  background: #fff;\n}\n\n.tip-container {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n\n.tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 9px;\n}\n\n.tip-header div {\n  color: #999;\n}\n\n.content {\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.button-container {\n  text-align: right;\n  padding-top: 4px;\n}\n\n.button-container button {\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: var(--appsmith-theme-borderRadius);\n  padding: 6px 16px;\n  background: none;\n  height: auto;\n  transition: all 0.3s ease;\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n  color: #fff;\n  border: 1px solid var(--appsmith-theme-primaryColor) !important;\n}\n\n.button-container button.reset {\n  border: 1px solid #999;\n  color: #999;\n  outline: none;\n  box-shadow: none;\n}\n\n.button-container button.reset:hover:not(:disabled) {\n  color: var(--appsmith-theme-primaryColor);\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.button-container button.reset:disabled {\n  cursor: default;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\n// https://codeshack.io/react-formatter/\nimport React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// Inject Tailwind\nconst style = document.createElement(\"link\");\nstyle.href = \"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\";\nstyle.rel = \"stylesheet\";\ndocument.head.appendChild(style);\nfunction PoliceTowForm({\n  rowData,\n  towReasons,\n  towCompanies\n}) {\n  const [row, setRow] = React.useState({});\n  React.useEffect(() => {\n    if (appsmith.model.rowData) {\n      setRow(appsmith.model.rowData); // edit mode\n    } else {\n      setRow({}); // add mode\n    }\n  }, [appsmith.model.rowData]);\n  function bindInput(field) {\n    return {\n      value: appsmith.model?.[field] ?? \"\",\n      onChange: e => {\n        const newRow = {\n          ...row,\n          [field]: e.target.value\n        };\n        setRow(newRow);\n        appsmith.updateModel(newRow);\n      }\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-6 bg-white rounded-2xl w-full max-w-6xl mx-auto\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-between items-center mb-4\"\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-2xl font-bold\"\n  }, \" Add / Edit Police Tow \"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-red-500 hover:bg-red-600 text-white font-semibold px-8 py-2 rounded-lg flex items-center\",\n    onClick: e => {\n      console.log(appsmith.model);\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"mr-2\"\n  }, \" \\u26A0 \"), \" SVS\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-2 gap-6\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center mb-4 space-x-4\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex space-x-4 mb-4\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col flex-1\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM-DD-YYYY\",\n    className: \"border rounded-md p-2 w-full\",\n    value: appsmith?.model?.date ?? \"\",\n    onChange: e => {\n      const newRow = {\n        ...row,\n        date: e.target.value\n      };\n      setRow(newRow);\n      appsmith.updateModel(newRow);\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col flex-1\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Time\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    maxLength: 4,\n    placeholder: \"2359\",\n    className: \"border rounded-md p-2 w-full\",\n    value: appsmith?.model?.time ?? \"\",\n    onChange: e => {\n      const raw = e.target.value.replace(/\\D/g, \"\").slice(0, 4); // enforce 4 digits\n      const newRow = {\n        ...row,\n        time: raw\n      };\n      setRow(newRow);\n      appsmith.updateModel(newRow);\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center space-x-2 mt-6\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium\"\n  }, \"HOLD\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    className: \"w-5 h-5\",\n    checked: !row.hold,\n    onChange: e => {\n      const newRow = {\n        ...row,\n        hold: e.target.checked\n      };\n      setRow(newRow);\n      appsmith.updateModel(newRow);\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-4\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Tow Reason\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"border rounded-md p-2 w-full\",\n    value: String(appsmith?.model?.towreasonid ?? appsmith?.model?.towreason_id ?? \"\"),\n    onChange: e => {\n      const id = e.target.value;\n      if (id === \"Other\") {\n        const customReason = prompt(\"Enter custom tow reason:\");\n        if (customReason) {\n          appsmith.triggerEvent(\"insertCustomReason\", {\n            reason: customReason\n          });\n        }\n        return;\n      }\n      const list = appsmith.model.towReasons || [];\n      const sel = list.find(r => String(r.id ?? r.reason_id ?? r.code ?? r.reason) === String(id));\n      const newRow = {\n        ...row,\n        towreasonid: id,\n        towreason_id: id,\n        towreason: sel?.reason ?? sel?.label ?? sel?.code ?? \"\",\n        towreasondesc: sel?.description ?? sel?.notes ?? \"\"\n      };\n      setRow(newRow);\n      appsmith.updateModel(newRow);\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    disabled: true,\n    hidden: true\n  }, \"Select a reason\"), (appsmith.model.towReasons || []).map(r => {\n    const optId = String(r.id ?? r.reason_id ?? r.code ?? r.reason);\n    const label = r.reason ?? r.label ?? r.code ?? optId;\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: optId,\n      value: optId\n    }, label);\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Other\"\n  }, \"Other\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-4\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Tow Company\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"border rounded-md p-2 w-full\",\n    value: appsmith?.model?.towcompany_id ?? \"\",\n    onChange: e => {\n      const id = e.target.value;\n      const list = appsmith.model.towCompanies || [];\n      const sel = list.find(c => String(c.id ?? c.company_id) === String(id));\n      const newRow = {\n        ...row,\n        towcompany_id: id,\n        // denormalized helpers (optional, handy for print/notes)\n        towcompanyname: sel?.name ?? sel?.company ?? \"\",\n        towcompanyphone: sel?.phone ?? \"\",\n        towcompanyaddress: sel?.address ?? \"\"\n      };\n      setRow(newRow);\n      appsmith.updateModel(newRow);\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    disabled: true,\n    hidden: true\n  }, \"Select a company\"), (appsmith.model.towCompanies || []).map(c => {\n    const optId = String(c.id ?? c.company_id);\n    const label = c.name ?? c.company;\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: optId,\n      value: optId\n    }, label);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-gray-200 text-black font-bold p-2 rounded mb-4\"\n  }, \"TOW COMPANY INFO TOW COMPANY INFO TOW COMPANY INFO TOW COMPANY INFO\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-4 gap-4 mb-4\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Make\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"make\")))), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Model\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"model\")))), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Year\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"vehicleyear\")))), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"Color\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"color\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-3 gap-4 mb-4\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"License Plate\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"licenseplate\")))), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"State\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"state\")))), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \"VIN\"), /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    className: \"border rounded-md p-2 w-full\"\n  }, bindInput(\"vin\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col h-full\"\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-sm font-medium mb-1\"\n  }, \" Notes \"), /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    className: \"border rounded-md p-2 w-full h-full min-h-[300px]\"\n  }, bindInput(\"notes\"), {\n    readOnly: true\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-end mt-4\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-blue-600 hover:bg-purple-700 text-white font-semibold px-6 py-2 rounded-lg\",\n    onClick: () => row.id ? UpdatePoliceTow.run(() => GetPoliceTows.run()) : AddPoliceTow.run(() => GetPoliceTows.run())\n  }, \"Save\")));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(PoliceTowForm, {\n    rowData: appsmith.model.rowData,\n    towReasons: appsmith.model.towReasons,\n    towCompanies: appsmith.model.towCompanies\n  }), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 4,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  padding: 29px 25px;\n  box-sizing: border-box;\n  font-family: system-ui;\n  background: #fff;\n}\n\n.tip-container {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n\n.tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 9px;\n}\n\n.tip-header div {\n  color: #999;\n}\n\n.content {\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.button-container {\n  text-align: right;\n  padding-top: 4px;\n}\n\n.button-container button {\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: var(--appsmith-theme-borderRadius);\n  padding: 6px 16px;\n  background: none;\n  height: auto;\n  transition: all 0.3s ease;\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n  color: #fff;\n  border: 1px solid var(--appsmith-theme-primaryColor) !important;\n}\n\n.button-container button.reset {\n  border: 1px solid #999;\n  color: #999;\n  outline: none;\n  box-shadow: none;\n}\n\n.button-container button.reset:hover:not(:disabled) {\n  color: var(--appsmith-theme-primaryColor);\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.button-container button.reset:disabled {\n  cursor: default;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "// https://codeshack.io/react-formatter/\nimport React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\n// Inject Tailwind\nconst style = document.createElement(\"link\");\nstyle.href =\n   \"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\";\nstyle.rel = \"stylesheet\";\ndocument.head.appendChild(style);\n\nfunction PoliceTowForm({ rowData, towReasons, towCompanies }) {\n   const [row, setRow] = React.useState({});\n\n   React.useEffect(() => {\n      if (appsmith.model.rowData) {\n         setRow(appsmith.model.rowData); // edit mode\n      } else {\n         setRow({}); // add mode\n      }\n   }, [appsmith.model.rowData]);\n\n   function bindInput(field) {\n      return {\n         value: appsmith.model?.[field] ?? \"\",\n         onChange: (e) => {\n            const newRow = {\n               ...row,\n               [field]: e.target.value,\n            };\n            setRow(newRow);\n            appsmith.updateModel(newRow);\n         },\n      };\n   }\n\n   return (\n      <div className=\"p-6 bg-white rounded-2xl w-full max-w-6xl mx-auto\">\n         <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-2xl font-bold\"> Add / Edit Police Tow </h2>\n            <button\n               className=\"bg-red-500 hover:bg-red-600 text-white font-semibold px-8 py-2 rounded-lg flex items-center\"\n               onClick={(e) => {\n                  console.log(appsmith.model);\n               }}\n            >\n               <span className=\"mr-2\"> ⚠ </span> SVS\n            </button>\n         </div>\n         <div className=\"grid grid-cols-2 gap-6\">\n            {/* Left side fields */}\n            <div>\n               {/* Date/Time and Hold */}\n               <div className=\"flex items-center mb-4 space-x-4\">\n                  <div className=\"flex space-x-4 mb-4\">\n                     {/* Date (MM-DD-YYYY) */}\n                     <div className=\"flex flex-col flex-1\">\n                        <label className=\"text-sm font-medium mb-1\">Date</label>\n                        <input\n                           type=\"text\"\n                           placeholder=\"MM-DD-YYYY\"\n                           className=\"border rounded-md p-2 w-full\"\n                           value={appsmith?.model?.date ?? \"\"}\n                           onChange={(e) => {\n                              const newRow = { ...row, date: e.target.value };\n                              setRow(newRow);\n                              appsmith.updateModel(newRow);\n                           }}\n                        />\n                     </div>\n\n                     {/* Time (HHMM) */}\n                     <div className=\"flex flex-col flex-1\">\n                        <label className=\"text-sm font-medium mb-1\">Time</label>\n                        <input\n                           type=\"text\"\n                           maxLength={4}\n                           placeholder=\"2359\"\n                           className=\"border rounded-md p-2 w-full\"\n                           value={appsmith?.model?.time ?? \"\"}\n                           onChange={(e) => {\n                              const raw = e.target.value\n                                 .replace(/\\D/g, \"\")\n                                 .slice(0, 4); // enforce 4 digits\n                              const newRow = { ...row, time: raw };\n                              setRow(newRow);\n                              appsmith.updateModel(newRow);\n                           }}\n                        />\n                     </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 mt-6\">\n                     <label className=\"text-sm font-medium\">HOLD</label>\n                     <input\n                        type=\"checkbox\"\n                        className=\"w-5 h-5\"\n                        checked={!row.hold}\n                        onChange={(e) => {\n                           const newRow = { ...row, hold: e.target.checked };\n                           setRow(newRow);\n                           appsmith.updateModel(newRow);\n                        }}\n                     />\n                  </div>\n               </div>\n               {/* Tow Reason */}\n               <div className=\"mb-4\">\n                  <label className=\"text-sm font-medium mb-1\">Tow Reason</label>\n\n                  <select\n                     className=\"border rounded-md p-2 w-full\"\n                     value={String(\n                        appsmith?.model?.towreasonid ??\n                           appsmith?.model?.towreason_id ??\n                           \"\"\n                     )}\n                     onChange={(e) => {\n                        const id = e.target.value;\n\n                        if (id === \"Other\") {\n                           const customReason = prompt(\n                              \"Enter custom tow reason:\"\n                           );\n                           if (customReason) {\n                              appsmith.triggerEvent(\"insertCustomReason\", {\n                                 reason: customReason,\n                              });\n                           }\n                           return;\n                        }\n\n                        const list = appsmith.model.towReasons || [];\n                        const sel = list.find(\n                           (r) =>\n                              String(\n                                 r.id ?? r.reason_id ?? r.code ?? r.reason\n                              ) === String(id)\n                        );\n\n                        const newRow = {\n                           ...row,\n                           towreasonid: id,\n                           towreason_id: id,\n                           towreason:\n                              sel?.reason ?? sel?.label ?? sel?.code ?? \"\",\n                           towreasondesc: sel?.description ?? sel?.notes ?? \"\",\n                        };\n\n                        setRow(newRow);\n                        appsmith.updateModel(newRow);\n                     }}\n                  >\n                     <option value=\"\" disabled hidden>\n                        Select a reason\n                     </option>\n                     {(appsmith.model.towReasons || []).map((r) => {\n                        const optId = String(\n                           r.id ?? r.reason_id ?? r.code ?? r.reason\n                        );\n                        const label = r.reason ?? r.label ?? r.code ?? optId;\n                        return (\n                           <option key={optId} value={optId}>\n                              {label}\n                           </option>\n                        );\n                     })}\n                     <option value=\"Other\">Other</option>\n                  </select>\n               </div>\n               {/* Tow Company */}\n               <div className=\"mb-4\">\n                  <label className=\"text-sm font-medium mb-1\">\n                     Tow Company\n                  </label>\n                  <select\n                     className=\"border rounded-md p-2 w-full\"\n                     value={appsmith?.model?.towcompany_id ?? \"\"}\n                     onChange={(e) => {\n                        const id = e.target.value;\n                        const list = appsmith.model.towCompanies || [];\n                        const sel = list.find(\n                           (c) => String(c.id ?? c.company_id) === String(id)\n                        );\n\n                        const newRow = {\n                           ...row,\n                           towcompany_id: id,\n                           // denormalized helpers (optional, handy for print/notes)\n                           towcompanyname: sel?.name ?? sel?.company ?? \"\",\n                           towcompanyphone: sel?.phone ?? \"\",\n                           towcompanyaddress: sel?.address ?? \"\",\n                        };\n\n                        setRow(newRow);\n                        appsmith.updateModel(newRow);\n                     }}\n                  >\n                     <option value=\"\" disabled hidden>\n                        Select a company\n                     </option>\n                     {(appsmith.model.towCompanies || []).map((c) => {\n                        const optId = String(c.id ?? c.company_id);\n                        const label = c.name ?? c.company;\n                        return (\n                           <option key={optId} value={optId}>\n                              {label}\n                           </option>\n                        );\n                     })}\n                  </select>\n               </div>\n               <div className=\"bg-gray-200 text-black font-bold p-2 rounded mb-4\">\n                  TOW COMPANY INFO TOW COMPANY INFO TOW COMPANY INFO TOW COMPANY\n                  INFO\n               </div>\n               {/* Vehicle Info */}\n               <div className=\"grid grid-cols-4 gap-4 mb-4\">\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">Make</label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"make\")}\n                     />\n                  </div>\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">Model</label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"model\")}\n                     />\n                  </div>\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">Year</label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"vehicleyear\")}\n                     />\n                  </div>\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">Color</label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"color\")}\n                     />\n                  </div>\n               </div>\n               <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">\n                        License Plate\n                     </label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"licenseplate\")}\n                     />\n                  </div>\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">State</label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"state\")}\n                     />\n                  </div>\n                  <div>\n                     <label className=\"text-sm font-medium mb-1\">VIN</label>\n                     <input\n                        type=\"text\"\n                        className=\"border rounded-md p-2 w-full\"\n                        {...bindInput(\"vin\")}\n                     />\n                  </div>\n               </div>\n            </div>\n            {/* Notes on the right */}\n            <div className=\"flex flex-col h-full\">\n               <label className=\"text-sm font-medium mb-1\"> Notes </label>\n               <textarea\n                  className=\"border rounded-md p-2 w-full h-full min-h-[300px]\"\n                  {...bindInput(\"notes\")}\n                  readOnly\n               ></textarea>\n            </div>\n         </div>\n         {/* Submit */}\n         <div className=\"flex justify-end mt-4\">\n            <button \n\t\t\t\t\t\t\tclassName=\"bg-blue-600 hover:bg-purple-700 text-white font-semibold px-6 py-2 rounded-lg\"\n\t\t\t\t\t\t\tonClick={() => (row.id\n\t\t\t\t\t\t\t\t? UpdatePoliceTow.run(() => GetPoliceTows.run())\n      \t\t\t\t\t: AddPoliceTow.run(() => GetPoliceTows.run()))}>\n               Save\n            </button>\n         </div>\n      </div>\n   );\n}\n\nappsmith.onReady(() => {\n   ReactDOM.render(\n      <PoliceTowForm\n         rowData={appsmith.model.rowData}\n         towReasons={appsmith.model.towReasons}\n         towCompanies={appsmith.model.towCompanies}\n      />,\n      document.getElementById(\"root\")\n   );\n});"
  },
  "version": 1,
  "widgetId": "d0t8lmr32m",
  "widgetName": "reactform"
}